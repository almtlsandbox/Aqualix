#!/usr/bin/env python3
"""
Validation de la progression granulaire - syst√®me complet
V√©rifie que le syst√®me de callbacks et progression d√©taill√©e fonctionne
"""

import sys
import os

# Ajouter le r√©pertoire racine au path  
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

def validate_granular_system():
    """Valide le syst√®me de progression granulaire complet"""
    print("üöÄ VALIDATION PROGRESSION GRANULAIRE COMPL√àTE")
    print("=" * 65)
    
    try:
        # Test 1: Import et fonctionnement des callbacks
        print("üìã Test 1: Syst√®me de callbacks")
        
        from src.image_processing import ImageProcessor
        from src.main import ImageVideoProcessorApp
        import tkinter as tk
        import numpy as np
        
        # Test ImageProcessor avec callbacks
        processor = ImageProcessor()
        test_image = np.random.randint(0, 255, (50, 50, 3), dtype=np.uint8)
        
        callback_calls = []
        def test_callback(message, percentage):
            callback_calls.append((message, percentage))
        
        processed = processor.process_image(test_image, progress_callback=test_callback)
        
        print(f"   ‚Ä¢ Callbacks re√ßus: {len(callback_calls)} ‚úÖ")
        print(f"   ‚Ä¢ Image trait√©e: {'‚úÖ' if processed is not None else '‚ùå'}")
        
        # Test 2: Messages en fran√ßais
        print("\nüìã Test 2: Messages contextuels fran√ßais")
        
        french_terms = [
            "Balance des blancs",
            "canal sombre", 
            "Beer-Lambert",
            "R√©√©quilibrage",
            "histogramme",
            "multi-√©chelle"
        ]
        
        messages = [call[0] for call in callback_calls]
        found_terms = 0
        
        for term in french_terms:
            if any(term.lower() in msg.lower() for msg in messages):
                print(f"   ‚Ä¢ Terme '{term}': ‚úÖ")
                found_terms += 1
            else:
                print(f"   ‚Ä¢ Terme '{term}': ‚ùå")
        
        # Test 3: Progression logique
        print("\nüìã Test 3: Logique de progression")
        
        is_increasing = False
        good_range = False
        
        if callback_calls:
            percentages = [call[1] for call in callback_calls]
            is_increasing = all(percentages[i] <= percentages[i+1] for i in range(len(percentages)-1))
            good_range = 10 <= min(percentages) and max(percentages) <= 85
            
            print(f"   ‚Ä¢ Progression croissante: {'‚úÖ' if is_increasing else '‚ùå'}")
            print(f"   ‚Ä¢ Range appropri√© (10-85%): {'‚úÖ' if good_range else '‚ùå'}")
            print(f"   ‚Ä¢ Nombre d'√©tapes: {len(callback_calls)} ({'‚úÖ' if len(callback_calls) >= 4 else '‚ùå'})")
        
        # Test 4: Int√©gration main app
        print("\nüìã Test 4: Int√©gration application principale")
        
        root = tk.Tk()
        root.withdraw()
        app = ImageVideoProcessorApp(root)
        app.original_image = test_image
        
        app_callbacks = []
        def app_callback(msg, pct):
            app_callbacks.append((msg, pct))
        
        full_res = app.get_full_resolution_processed_image(progress_callback=app_callback)
        
        print(f"   ‚Ä¢ App callbacks re√ßus: {len(app_callbacks)} ‚úÖ")
        print(f"   ‚Ä¢ Full-res trait√©e: {'‚úÖ' if full_res is not None else '‚ùå'}")
        
        root.destroy()
        
        # Test 5: Validation fichiers organis√©s
        print("\nüìã Test 5: Organisation des fichiers")
        
        test_files = [
            ("tests/test_granular_progress.py", "Test progression granulaire"),
            ("tests/test_video_progress.py", "Test progression vid√©o"),
            ("tools/validation/validate_progress_closure.py", "Validation fermeture"),
            ("tools/validation/validate_progress_repositioning.py", "Validation positionnement")
        ]
        
        organized_files = 0
        base_path = os.path.join(os.path.dirname(__file__), '..', '..')
        
        for file_path, description in test_files:
            full_path = os.path.join(base_path, file_path)
            if os.path.exists(full_path):
                print(f"   ‚Ä¢ {description}: ‚úÖ")
                organized_files += 1
            else:
                print(f"   ‚Ä¢ {description}: ‚ùå (cherch√©: {full_path})")
        
        # R√©sum√© final
        print(f"\nüéØ R√âSUM√â VALIDATION:")
        print(f"   ‚Ä¢ Callbacks fonctionnels: {'‚úÖ' if len(callback_calls) > 0 else '‚ùå'}")
        print(f"   ‚Ä¢ Messages fran√ßais: {found_terms}/6 ({'‚úÖ' if found_terms >= 4 else '‚ùå'})")
        print(f"   ‚Ä¢ Progression logique: {'‚úÖ' if is_increasing and good_range else '‚ùå'}")
        print(f"   ‚Ä¢ Int√©gration app: {'‚úÖ' if len(app_callbacks) > 0 else '‚ùå'}")
        print(f"   ‚Ä¢ Fichiers organis√©s: {organized_files}/4 ({'‚úÖ' if organized_files >= 3 else '‚ùå'})")
        
        # Validation globale
        validations_passed = (
            len(callback_calls) > 0 and
            found_terms >= 4 and
            is_increasing and good_range and
            len(app_callbacks) > 0 and
            organized_files >= 3
        )
        
        if validations_passed:
            print("\nüéâ PROGRESSION GRANULAIRE ENTI√àREMENT VALID√âE!")
            print("   ‚úÖ Syst√®me de callbacks op√©rationnel")
            print("   ‚úÖ Messages contextuels en fran√ßais")
            print("   ‚úÖ Progression math√©matiquement coh√©rente") 
            print("   ‚úÖ Int√©gration application compl√®te")
            print("   ‚úÖ Organisation des fichiers correcte")
            return True
        else:
            print("\n‚ö†Ô∏è  Validation incompl√®te")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur pendant validation: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = validate_granular_system()
    print("\n" + "=" * 65)
    print("üìù VALIDATION TERMIN√âE")
    sys.exit(0 if success else 1)
