#!/usr/bin/env python3
"""
Audit complet des param√®tres expos√©s dans Aqualix
V√©rifie que tous les param√®tres des algorithmes sont correctement expos√©s √† l'utilisateur
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__)))

from src.image_processing import ImageProcessor

def audit_parameters():
    """Audit complet de l'exposition des param√®tres"""
    print("üîç AUDIT COMPLET DES PARAM√àTRES AQUALIX")
    print("=" * 60)
    
    processor = ImageProcessor()
    
    # R√©cup√©rer tous les param√®tres par d√©faut
    default_params = processor.get_default_parameters()
    
    # R√©cup√©rer les informations UI des param√®tres  
    param_info = processor.get_parameter_info()
    
    print(f"\nüìä STATISTIQUES G√âN√âRALES:")
    print(f"   ‚Ä¢ Param√®tres par d√©faut: {len(default_params)}")
    print(f"   ‚Ä¢ Param√®tres UI: {len(param_info)}")
    
    # Grouper par algorithme
    algorithms = {
        'White Balance': [],
        'UDCP': [],
        'Beer-Lambert': [],
        'Color Rebalancing': [],
        'Histogram Equalization': [],
        'Multiscale Fusion': []
    }
    
    # Classer les param√®tres par algorithme
    for param_name in default_params.keys():
        if 'white_balance' in param_name or 'gray_world' in param_name or 'white_patch' in param_name or \
           'shades_of_gray' in param_name or 'grey_edge' in param_name or 'lake_' in param_name:
            algorithms['White Balance'].append(param_name)
        elif 'udcp' in param_name:
            algorithms['UDCP'].append(param_name)
        elif 'beer_lambert' in param_name:
            algorithms['Beer-Lambert'].append(param_name)
        elif 'color_rebalance' in param_name:
            algorithms['Color Rebalancing'].append(param_name)
        elif 'hist_eq' in param_name:
            algorithms['Histogram Equalization'].append(param_name)
        elif 'fusion' in param_name:
            algorithms['Multiscale Fusion'].append(param_name)
    
    # Audit par algorithme
    total_exposed = 0
    total_parameters = 0
    
    for algo_name, params in algorithms.items():
        if not params:
            continue
            
        print(f"\nüîß {algo_name.upper()}")
        print("-" * 50)
        
        exposed_count = 0
        for param in params:
            total_parameters += 1
            if param in param_info:
                exposed_count += 1
                total_exposed += 1
                ui_info = param_info[param]
                print(f"   ‚úÖ {param}")
                print(f"      Type: {ui_info['type']}, Label: {ui_info.get('label', 'N/A')}")
                if 'min' in ui_info and 'max' in ui_info:
                    print(f"      Range: {ui_info['min']} - {ui_info['max']}")
                if 'visible_when' in ui_info:
                    print(f"      Visible when: {ui_info['visible_when']}")
            else:
                print(f"   ‚ùå {param} - NON EXPOS√â")
        
        coverage = (exposed_count / len(params)) * 100 if params else 0
        print(f"\n   üìà Couverture: {exposed_count}/{len(params)} ({coverage:.1f}%)")
    
    # V√©rifier les param√®tres UI qui n'ont pas de d√©faut
    orphan_ui_params = set(param_info.keys()) - set(default_params.keys())
    if orphan_ui_params:
        print(f"\n‚ö†Ô∏è  PARAM√àTRES UI ORPHELINS (sans d√©faut):")
        for param in orphan_ui_params:
            print(f"   ‚Ä¢ {param}")
    
    # R√©sum√© final
    overall_coverage = (total_exposed / total_parameters) * 100 if total_parameters else 0
    print(f"\nüéØ R√âSUM√â GLOBAL:")
    print(f"   ‚Ä¢ Total param√®tres: {total_parameters}")
    print(f"   ‚Ä¢ Param√®tres expos√©s: {total_exposed}")
    print(f"   ‚Ä¢ Couverture globale: {overall_coverage:.1f}%")
    
    if overall_coverage >= 95:
        print("   ‚úÖ EXCELLENT - Presque tous les param√®tres sont expos√©s!")
    elif overall_coverage >= 80:
        print("   ‚ö†Ô∏è  BON - Majorit√© des param√®tres expos√©s")
    else:
        print("   ‚ùå INSUFFISANT - Beaucoup de param√®tres manquants")
    
    return total_parameters, total_exposed, overall_coverage

def audit_algorithm_integrity():
    """Audit de l'int√©grit√© des impl√©mentations d'algorithmes"""
    print(f"\n\nüî¨ AUDIT INT√âGRIT√â DES ALGORITHMES")
    print("=" * 60)
    
    processor = ImageProcessor()
    
    # Liste des m√©thodes d'algorithmes √† v√©rifier
    algorithms_to_check = [
        ('White Balance - Gray World', 'gray_world_white_balance'),
        ('White Balance - White Patch', 'white_patch_white_balance'),
        ('White Balance - Shades of Gray', 'shades_of_gray_white_balance'),
        ('White Balance - Grey Edge', 'grey_edge_white_balance'),
        ('White Balance - Lake Green Water', 'lake_green_water_white_balance'),
        ('UDCP', 'underwater_dark_channel_prior'),
        ('Beer-Lambert', 'beer_lambert_correction'),
        ('Color Rebalancing', 'color_rebalance'),
        ('Histogram Equalization', 'adaptive_histogram_equalization'),
        ('Multiscale Fusion', 'multiscale_fusion')
    ]
    
    implementation_status = []
    
    for algo_name, method_name in algorithms_to_check:
        print(f"\nüîç {algo_name}")
        print("-" * 40)
        
        # V√©rifier si la m√©thode existe
        if hasattr(processor, method_name):
            print(f"   ‚úÖ M√©thode {method_name} pr√©sente")
            
            # V√©rifier la signature de la m√©thode
            method = getattr(processor, method_name)
            if callable(method):
                print(f"   ‚úÖ M√©thode callable")
                implementation_status.append((algo_name, True, "Impl√©ment√©"))
            else:
                print(f"   ‚ùå M√©thode non callable")
                implementation_status.append((algo_name, False, "Non callable"))
        else:
            print(f"   ‚ùå M√©thode {method_name} manquante")
            implementation_status.append((algo_name, False, "M√©thode manquante"))
    
    # R√©sum√© des impl√©mentations
    implemented = sum(1 for _, status, _ in implementation_status if status)
    total = len(implementation_status)
    
    print(f"\nüìã R√âSUM√â IMPL√âMENTATIONS:")
    print(f"   ‚Ä¢ Algorithmes impl√©ment√©s: {implemented}/{total}")
    
    for algo_name, status, note in implementation_status:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"   {status_icon} {algo_name}: {note}")
    
    return implementation_status

def main():
    """Ex√©cution de l'audit complet"""
    print("üöÄ D√âMARRAGE AUDIT COMPLET AQUALIX")
    print("=" * 60)
    
    # Phase 1: Audit des param√®tres
    total_params, exposed_params, coverage = audit_parameters()
    
    # Phase 2: Audit de l'int√©grit√© des algorithmes
    implementations = audit_algorithm_integrity()
    
    # Rapport final
    print(f"\n\nüìã RAPPORT FINAL D'AUDIT")
    print("=" * 60)
    print(f"‚úÖ Param√®tres: {exposed_params}/{total_params} expos√©s ({coverage:.1f}%)")
    
    implemented_algos = sum(1 for _, status, _ in implementations if status)
    total_algos = len(implementations)
    print(f"‚úÖ Algorithmes: {implemented_algos}/{total_algos} impl√©ment√©s")
    
    if coverage >= 90 and implemented_algos == total_algos:
        print("\nüéâ AUDIT R√âUSSI - Syst√®me complet et bien expos√©!")
    elif coverage >= 80:
        print("\n‚ö†Ô∏è  AUDIT PARTIEL - Am√©liorations recommand√©es")
    else:
        print("\n‚ùå AUDIT √âCHOU√â - Corrections majeures n√©cessaires")

if __name__ == "__main__":
    main()
