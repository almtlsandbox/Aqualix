#!/usr/bin/env python3
"""
Script d'am√©lioration des recommandations de contr√¥le qualit√©
Ajoute des conseils pr√©cis avec noms des param√®tres et valeurs sugg√©r√©es
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

def create_improved_recommendations():
    """Cr√©e des recommandations am√©lior√©es avec vocabulaire pr√©cis"""
    
    # Recommandations pr√©cises avec noms de param√®tres et valeurs
    improved_recommendations_fr = {
        # BEER-LAMBERT RECOMMENDATIONS
        'qc_reduce_red_gain_precise': 'R√©duire "Facteur Rouge" de 0.1-0.2 (ex: 1.5 ‚Üí 1.3)',
        'qc_reduce_blue_compensation': 'R√©duire "Facteur Bleu" de 0.1 (ex: 2.0 ‚Üí 1.9)',
        'qc_adjust_depth_factor': 'Augmenter "Facteur Profondeur" de 0.1-0.2 (ex: 0.5 ‚Üí 0.7)',
        
        # WHITE BALANCE RECOMMENDATIONS  
        'qc_change_wb_method': 'Changer m√©thode: "Gray World" ‚Üí "Shades of Gray" ou "Grey Edge"',
        'qc_reduce_wb_percentile': 'R√©duire "Percentile" de 10-15 (ex: 75 ‚Üí 60)',
        'qc_limit_max_adjustment': 'Limiter "Ajustement Max" √† 2.0-2.5 (ex: 3.0 ‚Üí 2.2)',
        
        # COLOR REBALANCING RECOMMENDATIONS
        'qc_reduce_saturation_limit': 'R√©duire "Limite de saturation" de 0.1-0.2 (ex: 0.8 ‚Üí 0.6)',
        'qc_adjust_matrix_rr': 'R√©duire coefficient "RR" de 0.1-0.2 (ex: 1.2 ‚Üí 1.0)',
        'qc_adjust_matrix_rg': 'Ajuster coefficient "RG" vers 0 (ex: 0.3 ‚Üí 0.1)',
        'qc_enable_luminance_preserve': 'Activer "Pr√©servation Luminance" si d√©sactiv√©e',
        
        # CLAHE RECOMMENDATIONS
        'qc_reduce_clahe_clip_precise': 'R√©duire "Limite Clip" de 1.0-2.0 (ex: 4.0 ‚Üí 2.5)',
        'qc_increase_clahe_tile_size': 'Augmenter "Taille Tuile" (ex: 8x8 ‚Üí 12x12)',
        'qc_disable_clahe': 'D√©sactiver CLAHE temporairement pour tester',
        
        # MULTISCALE FUSION RECOMMENDATIONS
        'qc_reduce_contrast_weight': 'R√©duire "Poids Contraste" de 0.2-0.3 (ex: 1.0 ‚Üí 0.7)',
        'qc_reduce_saturation_weight': 'R√©duire "Poids Saturation" de 0.2 (ex: 1.0 ‚Üí 0.8)',
        'qc_reduce_exposedness_weight': 'R√©duire "Poids Exposition" de 0.1-0.2 (ex: 1.0 ‚Üí 0.8)',
        'qc_reduce_fusion_levels': 'R√©duire "Niveaux Laplaciens" de 1-2 (ex: 5 ‚Üí 3)',
        
        # UDCP RECOMMENDATIONS
        'qc_reduce_omega': 'R√©duire "Omega" de 0.05-0.1 (ex: 0.85 ‚Üí 0.75)',
        'qc_increase_t0': 'Augmenter "T0" de 0.02-0.05 (ex: 0.1 ‚Üí 0.15)',
        'qc_reduce_udcp_window_size': 'R√©duire "Taille Fen√™tre" de 2-5 pixels (ex: 15 ‚Üí 10)',
        'qc_increase_guided_radius': 'Augmenter "Rayon Filtre Guid√©" de 10-20 (ex: 40 ‚Üí 60)',
        
        # GENERAL WORKFLOW RECOMMENDATIONS
        'qc_try_different_sequence': 'Essayer s√©quence diff√©rente: UDCP ‚Üí Balance ‚Üí Rebalancing',
        'qc_disable_step_temporarily': 'D√©sactiver une √©tape temporairement pour isoler le probl√®me',
        'qc_use_auto_tune': 'Activer Auto-Tune pour optimisation automatique',
        'qc_check_original_quality': 'V√©rifier qualit√© image originale (bruit, nettet√©)',
    }
    
    improved_recommendations_en = {
        # BEER-LAMBERT RECOMMENDATIONS
        'qc_reduce_red_gain_precise': 'Reduce "Red Factor" by 0.1-0.2 (ex: 1.5 ‚Üí 1.3)',
        'qc_reduce_blue_compensation': 'Reduce "Blue Factor" by 0.1 (ex: 2.0 ‚Üí 1.9)',
        'qc_adjust_depth_factor': 'Increase "Depth Factor" by 0.1-0.2 (ex: 0.5 ‚Üí 0.7)',
        
        # WHITE BALANCE RECOMMENDATIONS  
        'qc_change_wb_method': 'Change method: "Gray World" ‚Üí "Shades of Gray" or "Grey Edge"',
        'qc_reduce_wb_percentile': 'Reduce "Percentile" by 10-15 (ex: 75 ‚Üí 60)',
        'qc_limit_max_adjustment': 'Limit "Max Adjustment" to 2.0-2.5 (ex: 3.0 ‚Üí 2.2)',
        
        # COLOR REBALANCING RECOMMENDATIONS
        'qc_reduce_saturation_limit': 'Reduce "Saturation Limit" by 0.1-0.2 (ex: 0.8 ‚Üí 0.6)',
        'qc_adjust_matrix_rr': 'Reduce "RR" coefficient by 0.1-0.2 (ex: 1.2 ‚Üí 1.0)',
        'qc_adjust_matrix_rg': 'Adjust "RG" coefficient toward 0 (ex: 0.3 ‚Üí 0.1)',
        'qc_enable_luminance_preserve': 'Enable "Preserve Luminance" if disabled',
        
        # CLAHE RECOMMENDATIONS
        'qc_reduce_clahe_clip_precise': 'Reduce "Clip Limit" by 1.0-2.0 (ex: 4.0 ‚Üí 2.5)',
        'qc_increase_clahe_tile_size': 'Increase "Tile Size" (ex: 8x8 ‚Üí 12x12)',
        'qc_disable_clahe': 'Disable CLAHE temporarily for testing',
        
        # MULTISCALE FUSION RECOMMENDATIONS
        'qc_reduce_contrast_weight': 'Reduce "Contrast Weight" by 0.2-0.3 (ex: 1.0 ‚Üí 0.7)',
        'qc_reduce_saturation_weight': 'Reduce "Saturation Weight" by 0.2 (ex: 1.0 ‚Üí 0.8)',
        'qc_reduce_exposedness_weight': 'Reduce "Exposedness Weight" by 0.1-0.2 (ex: 1.0 ‚Üí 0.8)',
        'qc_reduce_fusion_levels': 'Reduce "Laplacian Levels" by 1-2 (ex: 5 ‚Üí 3)',
        
        # UDCP RECOMMENDATIONS
        'qc_reduce_omega': 'Reduce "Omega" by 0.05-0.1 (ex: 0.85 ‚Üí 0.75)',
        'qc_increase_t0': 'Increase "T0" by 0.02-0.05 (ex: 0.1 ‚Üí 0.15)',
        'qc_reduce_udcp_window_size': 'Reduce "Window Size" by 2-5 pixels (ex: 15 ‚Üí 10)',
        'qc_increase_guided_radius': 'Increase "Guided Filter Radius" by 10-20 (ex: 40 ‚Üí 60)',
        
        # GENERAL WORKFLOW RECOMMENDATIONS
        'qc_try_different_sequence': 'Try different sequence: UDCP ‚Üí White Balance ‚Üí Rebalancing',
        'qc_disable_step_temporarily': 'Disable one step temporarily to isolate issue',
        'qc_use_auto_tune': 'Enable Auto-Tune for automatic optimization',
        'qc_check_original_quality': 'Check original image quality (noise, sharpness)',
    }
    
    return improved_recommendations_fr, improved_recommendations_en

def create_parameter_mapping():
    """Cr√©e le mapping entre recommandations et param√®tres sp√©cifiques"""
    
    parameter_mapping = {
        # Mapping recommandation ‚Üí param√®tre technique
        'qc_reduce_red_gain': 'beer_lambert_red_factor',
        'qc_reduce_red_compensation': ['white_balance_method', 'color_rebalance_rr'],
        'qc_reduce_saturation': 'color_rebalance_saturation_limit',
        'qc_reduce_clahe_clip_limit': 'hist_eq_clip_limit',
        'qc_halo_artifacts': ['hist_eq_clip_limit', 'multiscale_fusion_contrast_weight'],
        'qc_shadow_detail_lost': ['hist_eq_enabled', 'beer_lambert_depth_factor'],
        'qc_noise_amplification': ['beer_lambert_red_factor', 'color_rebalance_rr'],
    }
    
    return parameter_mapping

def create_severity_based_adjustments():
    """Cr√©e des ajustements bas√©s sur la s√©v√©rit√© des probl√®mes"""
    
    severity_adjustments = {
        'low': {
            'beer_lambert_red_factor': -0.1,
            'color_rebalance_saturation_limit': -0.1,
            'hist_eq_clip_limit': -1.0,
            'multiscale_fusion_contrast_weight': -0.2,
        },
        'medium': {
            'beer_lambert_red_factor': -0.2,
            'color_rebalance_saturation_limit': -0.2,
            'hist_eq_clip_limit': -2.0,
            'multiscale_fusion_contrast_weight': -0.3,
        },
        'high': {
            'beer_lambert_red_factor': -0.3,
            'color_rebalance_saturation_limit': -0.3,
            'hist_eq_clip_limit': -3.0,
            'multiscale_fusion_contrast_weight': -0.5,
        }
    }
    
    return severity_adjustments

def generate_contextual_recommendations():
    """G√©n√®re des recommandations contextuelles bas√©es sur les probl√®mes d√©tect√©s"""
    
    contextual_recommendations = {
        # Combinaisons de probl√®mes courants
        ('extreme_red', 'magenta_shift'): [
            'Probl√®me de sur-correction rouge d√©tect√©',
            '1. R√©duire "Facteur Rouge" Beer-Lambert de 0.2 (ex: 1.5 ‚Üí 1.3)',
            '2. Changer m√©thode Balance ‚Üí "Shades of Gray"',
            '3. R√©duire "RR" matrice couleur de 0.1 (ex: 1.2 ‚Üí 1.1)'
        ],
        
        ('saturation_clipping', 'halo_artifacts'): [
            'Probl√®me de sur-traitement d√©tect√©',
            '1. R√©duire "Limite Saturation" de 0.2 (ex: 0.8 ‚Üí 0.6)',
            '2. R√©duire "Limite Clip" CLAHE de 2.0 (ex: 4.0 ‚Üí 2.0)',
            '3. R√©duire "Poids Contraste" fusion de 0.3 (ex: 1.0 ‚Üí 0.7)'
        ],
        
        ('noise_amplification', 'shadow_detail_lost'): [
            'Probl√®me d\'amplification excessive d√©tect√©',
            '1. Augmenter "Facteur Profondeur" Beer-Lambert de 0.1',
            '2. R√©duire "Facteur Rouge" de 0.15 (ex: 1.4 ‚Üí 1.25)',
            '3. Activer "Pr√©servation Luminance" si d√©sactiv√©e'
        ]
    }
    
    return contextual_recommendations

def main():
    """Fonction principale pour tester les am√©liorations"""
    
    print("üîß AM√âLIORATION DES RECOMMANDATIONS QUALIT√â")
    print("=" * 60)
    
    # Cr√©er les recommandations am√©lior√©es
    rec_fr, rec_en = create_improved_recommendations()
    param_mapping = create_parameter_mapping()
    severity_adj = create_severity_based_adjustments()
    contextual_rec = generate_contextual_recommendations()
    
    print(f"\n‚úÖ Recommandations pr√©cises cr√©√©es:")
    print(f"   ‚Ä¢ {len(rec_fr)} recommandations fran√ßaises")
    print(f"   ‚Ä¢ {len(rec_en)} recommandations anglaises")
    print(f"   ‚Ä¢ {len(param_mapping)} mappings param√®tres")
    print(f"   ‚Ä¢ {len(severity_adj)} niveaux de s√©v√©rit√©")
    print(f"   ‚Ä¢ {len(contextual_rec)} recommandations contextuelles")
    
    print(f"\nüìã Exemples de recommandations pr√©cises:")
    for key, value in list(rec_fr.items())[:5]:
        print(f"   ‚Ä¢ {key}: {value}")
    
    print(f"\nüéØ Exemples de mapping param√®tres:")
    for rec, param in list(param_mapping.items())[:3]:
        print(f"   ‚Ä¢ {rec} ‚Üí {param}")
    
    print(f"\n‚öôÔ∏è Ajustements par s√©v√©rit√© (medium):")
    for param, adjust in severity_adj['medium'].items():
        print(f"   ‚Ä¢ {param}: {adjust:+.1f}")
    
    print(f"\nüîÑ Prochaines √©tapes recommand√©es:")
    print(f"   1. Int√©grer ces recommandations dans quality_check.py")
    print(f"   2. Modifier les cl√©s de traduction dans localization.py")
    print(f"   3. Ajouter logique de recommandation contextuelle")
    print(f"   4. Cr√©er interface pour ajustements automatiques")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print(f"\n‚úÖ Script termin√© avec succ√®s")
    else:
        print(f"\n‚ùå Erreur dans l'ex√©cution")
