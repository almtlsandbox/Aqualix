"""
Test direct dans l'application avec IMG_4292.JPG
Pour v√©rifier si le bug de d√©tection persiste
"""

import sys
sys.path.insert(0, '.')

import tkinter as tk
from src.main import ImageVideoProcessorApp
from src.quality_check import PostProcessingQualityChecker
import cv2
import os

def test_in_app():
    """Test direct dans l'application"""
    print("üéØ TEST DIRECT DANS L'APPLICATION - IMG_4292.JPG")
    print("=" * 60)
    
    image_path = r"D:\OneDrive\DOCS\BATEAU-SCUBA\SCUBA\PHOTOS\COLOR CORRECTION\test\IMG_4292.JPG"
    
    if not os.path.exists(image_path):
        print(f"‚ùå Image non trouv√©e: {image_path}")
        return
    
    try:
        # Cr√©er l'application
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre
        app = ImageVideoProcessorApp(root)
        
        print("üì∏ Chargement de l'image dans l'application...")
        
        # Charger l'image comme le ferait l'application
        img_bgr = cv2.imread(image_path)
        if img_bgr is None:
            print("‚ùå Impossible de charger l'image")
            return
            
        # Simuler le chargement dans l'app
        app.original_image = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
        app.current_file = image_path
        
        print(f"   Image charg√©e: {app.original_image.shape}")
        
        # Test 1: Image originale (sans traitement)
        print(f"\nüîç TEST 1: Analyse de l'image ORIGINALE (sans traitement)")
        checker = PostProcessingQualityChecker()
        
        # Attention: l'app stocke en RGB, mais quality_check attend BGR
        img_for_analysis = cv2.cvtColor(app.original_image, cv2.COLOR_RGB2BGR)
        results_orig = checker.run_all_checks(img_for_analysis, img_for_analysis)
        
        red_data_orig = results_orig.get('unrealistic_colors', {})
        red_pixels_orig = red_data_orig.get('extreme_red_pixels', 0)
        score_orig = checker._calculate_overall_score(results_orig)
        
        print(f"   Pixels rouges d√©tect√©s: {red_pixels_orig*100:.2f}%")
        print(f"   Score: {score_orig:.2f}/10")
        
        if red_pixels_orig > 0.02:
            print(f"   üö® L'APPLICATION D√âTECTE un probl√®me rouge!")
        else:
            print(f"   ‚úÖ L'APPLICATION NE D√âTECTE PAS de probl√®me rouge")
        
        # Test 2: Image apr√®s traitement par l'app
        print(f"\nüîç TEST 2: Analyse apr√®s TRAITEMENT par l'application")
        processed_img = app.get_full_resolution_processed_image()
        
        if processed_img is not None:
            # Convertir pour l'analyse
            img_processed_for_analysis = cv2.cvtColor(processed_img, cv2.COLOR_RGB2BGR)
            results_processed = checker.run_all_checks(img_processed_for_analysis, img_for_analysis)
            
            red_data_processed = results_processed.get('unrealistic_colors', {})
            red_pixels_processed = red_data_processed.get('extreme_red_pixels', 0)
            score_processed = checker._calculate_overall_score(results_processed)
            
            print(f"   Pixels rouges apr√®s traitement: {red_pixels_processed*100:.2f}%")
            print(f"   Score apr√®s traitement: {score_processed:.2f}/10")
            print(f"   √âvolution: {red_pixels_processed - red_pixels_orig:+.3f} ({(red_pixels_processed - red_pixels_orig)*100:+.1f}%)")
            
            if red_pixels_processed < red_pixels_orig:
                print(f"   ‚úÖ Le traitement R√âDUIT les probl√®mes de rouge")
            elif red_pixels_processed > red_pixels_orig:
                print(f"   ‚ö†Ô∏è  Le traitement AUGMENTE les probl√®mes de rouge")
            else:
                print(f"   ‚û°Ô∏è  Le traitement n'affecte pas les probl√®mes de rouge")
        else:
            print(f"   ‚ùå Impossible de traiter l'image")
        
        # Comparaison avec notre analyse pr√©c√©dente
        print(f"\nüìä COMPARAISON:")
        print(f"   Analyse optimis√©e pr√©c√©dente: 0.00% rouge")
        print(f"   Application (image originale): {red_pixels_orig*100:.2f}% rouge")
        
        if red_pixels_orig > 0.01:
            print(f"   ‚ùì CONTRADICTION d√©tect√©e!")
            print(f"      L'application d√©tecte du rouge l√† o√π l'analyse optimis√©e n'en trouve pas")
            print(f"      Cela peut √™tre d√ª √†:")
            print(f"         ‚Ä¢ Diff√©rence de r√©solution (analyse vs image compl√®te)")
            print(f"         ‚Ä¢ Zones locales non √©chantillonn√©es")
            print(f"         ‚Ä¢ Bug de conversion d'image")
        else:
            print(f"   ‚úÖ COH√âRENCE: Les deux analyses concordent")
        
        root.destroy()
        
        return red_pixels_orig > 0.02
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_in_app()
