#!/usr/bin/env python3
"""
Validation des am√©liorations des param√®tres par d√©faut bas√©es sur la litt√©rature scientifique
"""

import sys
import os

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(__file__))

from src.image_processing import ImageProcessor

def validate_improvements():
    """Valide les am√©liorations apport√©es aux param√®tres par d√©faut"""
    
    processor = ImageProcessor()
    params = processor.get_all_parameters()
    
    print("=== VALIDATION DES AM√âLIORATIONS AQUALIX ===")
    print("Param√®tres optimis√©s selon la litt√©rature scientifique\n")
    
    # Test des am√©liorations critiques
    improvements = [
        {
            'param': 'gray_world_percentile',
            'expected': 15,
            'old_value': 50,
            'rationale': 'Iqbal et al. (2007) - √âvite pixels satur√©s'
        },
        {
            'param': 'beer_lambert_depth_factor',
            'expected': 0.15,
            'old_value': 0.1,
            'rationale': 'Chiang & Chen (2012) - Correction plus efficace'
        },
        {
            'param': 'color_rebalance_saturation_limit',
            'expected': 0.8,
            'old_value': 1.0,
            'rationale': 'Ancuti et al. (2012) - Protection anti-magenta'
        },
        {
            'param': 'udcp_window_size',
            'expected': 11,
            'old_value': 15,
            'rationale': 'Ancuti et al. (2018) - Pr√©servation d√©tails'
        },
        {
            'param': 'multiscale_fusion_enabled',
            'expected': True,
            'old_value': False,
            'rationale': 'Ancuti et al. (2017) - B√©n√©fices significatifs'
        },
        {
            'param': 'lake_green_reduction',
            'expected': 0.4,
            'old_value': 0.3,
            'rationale': 'R√©duction verte plus agressive pour eau douce'
        }
    ]
    
    success_count = 0
    total_count = len(improvements)
    
    for improvement in improvements:
        param_name = improvement['param']
        expected = improvement['expected']
        current = params.get(param_name)
        old_value = improvement['old_value']
        rationale = improvement['rationale']
        
        if current == expected:
            status = "‚úÖ CORRECT"
            success_count += 1
        else:
            status = "‚ùå ERREUR"
            
        print(f"{status} {param_name}:")
        print(f"   Ancien: {old_value} ‚Üí Attendu: {expected} ‚Üí Actuel: {current}")
        print(f"   Justification: {rationale}")
        print()
    
    # R√©sum√©
    success_rate = (success_count / total_count) * 100
    print(f"üìä R√âSUM√â: {success_count}/{total_count} am√©liorations correctement appliqu√©es ({success_rate:.1f}%)")
    
    if success_count == total_count:
        print("üéâ Tous les param√®tres par d√©faut sont maintenant optimis√©s selon la litt√©rature !")
        print("üåä L'application devrait donner de meilleurs r√©sultats sur les images sous-marines")
        
        # Test des valeurs coh√©rentes
        print("\nüîç V√âRIFICATION DE COH√âRENCE:")
        
        # V√©rifier coh√©rence entre param√®tres initiaux et get_default_parameters()
        defaults = processor.get_default_parameters()
        
        coherence_checks = [
            ('gray_world_percentile', 15),
            ('beer_lambert_depth_factor', 0.15),
            ('color_rebalance_saturation_limit', 0.8),
            ('udcp_window_size', 11),
            ('multiscale_fusion_enabled', True)
        ]
        
        coherence_success = 0
        for param, expected_val in coherence_checks:
            init_val = params.get(param)
            default_val = defaults.get(param)
            
            if init_val == default_val == expected_val:
                print(f"‚úÖ {param}: Coh√©rent ({init_val})")
                coherence_success += 1
            else:
                print(f"‚ùå {param}: Incoh√©rent - Init: {init_val}, Default: {default_val}")
        
        if coherence_success == len(coherence_checks):
            print("‚úÖ Parfaite coh√©rence entre param√®tres initiaux et defaults")
        else:
            print(f"‚ö†Ô∏è  {len(coherence_checks) - coherence_success} incoh√©rences d√©tect√©es")
            
    else:
        print("‚ö†Ô∏è Certaines am√©liorations n'ont pas √©t√© appliqu√©es correctement")
        print("üîß V√©rifier les modifications dans src/image_processing.py")
    
    return success_count == total_count

def test_pipeline_order():
    """Teste que l'ordre du pipeline est toujours correct"""
    
    processor = ImageProcessor()
    expected_order = [
        'white_balance',
        'udcp', 
        'beer_lambert',
        'color_rebalance',
        'histogram_equalization',
        'multiscale_fusion'
    ]
    
    actual_order = processor.pipeline_order
    
    print("\nüîÑ ORDRE DU PIPELINE:")
    if actual_order == expected_order:
        print("‚úÖ Ordre du pipeline correct")
        for i, step in enumerate(actual_order, 1):
            enabled_param = f"{step}_enabled" if step != 'white_balance' else 'white_balance_enabled'
            enabled = processor.get_parameter(enabled_param)
            status = "üü¢ Activ√©" if enabled else "üî¥ D√©sactiv√©"
            print(f"   {i}. {step.replace('_', ' ').title()} - {status}")
    else:
        print("‚ùå Ordre du pipeline incorrect")
        print(f"   Attendu: {expected_order}")
        print(f"   Actuel:  {actual_order}")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ D√©marrage validation des am√©liorations...\n")
    
    params_ok = validate_improvements()
    pipeline_ok = test_pipeline_order()
    
    print("\n" + "="*60)
    if params_ok and pipeline_ok:
        print("üéØ VALIDATION R√âUSSIE - Toutes les am√©liorations sont correctes !")
        print("üìà Les param√®tres sont maintenant optimis√©s pour l'imagerie sous-marine")
        print("üåä Bas√©s sur plus de 8 r√©f√©rences scientifiques majeures")
    else:
        print("‚ùå VALIDATION √âCHOU√âE - Corrections n√©cessaires")
        
    print("\nüìö Am√©liorations appliqu√©es selon:")
    print("‚Ä¢ Ancuti, Ancuti & Bekaert - Fusion et color balance")
    print("‚Ä¢ Drews, Nascimento & Botelho - UDCP sous-marin") 
    print("‚Ä¢ Chiang & Chen - Compensation longueur d'onde")
    print("‚Ä¢ Iqbal, Odetayo & James - Mod√®le couleur int√©gr√©")
    print("‚Ä¢ He, Sun & Tang - Dark channel prior original")
