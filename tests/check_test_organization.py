#!/usr/bin/env python3
"""
Script de test simple pour les tests auto-tune d√©plac√©s
V√©rifie que tous les tests fonctionnent depuis leur nouvel emplacement
"""

import sys
import os
from pathlib import Path

# Ajout du r√©pertoire racine au path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

def test_imports():
    """Test que les imports fonctionnent depuis les nouveaux emplacements"""
    
    print("üß™ TEST DES IMPORTS DEPUIS LES NOUVEAUX EMPLACEMENTS")
    print("=" * 60)
    
    tests_passed = 0
    tests_total = 0
    
    # Test 1: Import du module image_processing
    print("\n1Ô∏è‚É£ Test import ImageProcessor")
    try:
        from src.image_processing import ImageProcessor
        print("   ‚úÖ ImageProcessor import√© avec succ√®s")
        tests_passed += 1
    except ImportError as e:
        print(f"   ‚ùå √âchec import ImageProcessor: {e}")
    tests_total += 1
    
    # Test 2: Test des chemins vers les tests auto-tune
    print("\n2Ô∏è‚É£ Test chemins tests auto-tune")
    autotune_dir = Path(__file__).parent / "autotune"
    if autotune_dir.exists():
        test_mapping = autotune_dir / "test_autotune_mapping.py"
        test_quality = autotune_dir / "test_quality_metrics.py"
        
        if test_mapping.exists() and test_quality.exists():
            print("   ‚úÖ Fichiers de test auto-tune trouv√©s")
            tests_passed += 1
        else:
            print("   ‚ùå Fichiers de test auto-tune manquants")
    else:
        print("   ‚ùå R√©pertoire autotune manquant")
    tests_total += 1
    
    # Test 3: Initialisation syst√®me auto-tune
    print("\n3Ô∏è‚É£ Test initialisation syst√®me auto-tune")
    try:
        processor = ImageProcessor()
        success = processor.initialize_autotune_mapping()
        if success:
            print("   ‚úÖ Syst√®me de mapping initialis√©")
            tests_passed += 1
        else:
            print("   ‚ùå √âchec initialisation mapping")
    except Exception as e:
        print(f"   ‚ùå Erreur initialisation: {e}")
    tests_total += 1
    
    # Test 4: Initialisation m√©triques qualit√©
    print("\n4Ô∏è‚É£ Test initialisation m√©triques qualit√©")
    try:
        if 'processor' in locals():
            success = processor.initialize_quality_metrics()
            if success:
                print("   ‚úÖ Syst√®me de m√©triques initialis√©")
                tests_passed += 1
            else:
                print("   ‚ùå √âchec initialisation m√©triques")
        else:
            print("   ‚ùå Processor non disponible")
    except Exception as e:
        print(f"   ‚ùå Erreur initialisation: {e}")
    tests_total += 1
    
    # R√©sum√©
    print(f"\nüéØ R√âSUM√â")
    print("=" * 30)
    print(f"Tests r√©ussis: {tests_passed}/{tests_total}")
    print(f"Taux de r√©ussite: {(tests_passed/tests_total*100):.1f}%")
    
    if tests_passed == tests_total:
        print("\n‚úÖ TOUS LES TESTS DE BASE R√âUSSIS!")
        print("Les fichiers de test ont √©t√© correctement d√©plac√©s.")
        return True
    else:
        print(f"\n‚ùå {tests_total - tests_passed} test(s) en √©chec.")
        return False

def check_test_structure():
    """V√©rifie la structure des r√©pertoires de test"""
    
    print("\nüìÅ STRUCTURE DES R√âPERTOIRES DE TEST")
    print("=" * 50)
    
    tests_dir = Path(__file__).parent
    
    # R√©pertoires attendus
    expected_dirs = ['autotune', 'integration', 'ui', 'unit', 'analysis', 'fixtures', 'performance']
    
    for dir_name in expected_dirs:
        dir_path = tests_dir / dir_name
        if dir_path.exists():
            files = list(dir_path.glob("*.py"))
            print(f"   ‚úÖ {dir_name}/: {len(files)} fichier(s) Python")
        else:
            print(f"   ‚ùå {dir_name}/: R√©pertoire manquant")
    
    # Fichiers de test auto-tune sp√©cifiquement
    print("\nüîß FICHIERS AUTO-TUNE:")
    autotune_dir = tests_dir / "autotune"
    if autotune_dir.exists():
        for test_file in autotune_dir.glob("test_*.py"):
            print(f"   üìÑ {test_file.name}")
    else:
        print("   ‚ùå Aucun fichier auto-tune trouv√©")

def main():
    """Fonction principale"""
    
    print("üöÄ V√âRIFICATION D√âPLACEMENT TESTS AQUALIX")
    print("=" * 60)
    
    # V√©rification structure
    check_test_structure()
    
    # Test des imports et fonctionnalit√©s
    success = test_imports()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ D√âPLACEMENT DES TESTS R√âUSSI!")
        print("Tous les fichiers de test sont correctement organis√©s et fonctionnels.")
        return 0
    else:
        print("‚ö†Ô∏è  PROBL√àMES D√âTECT√âS lors du d√©placement.")
        print("V√©rification manuelle recommand√©e.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
