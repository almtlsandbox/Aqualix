#!/usr/bin/env python3
"""
Test simple des corrections sans import complexe

CORRECTIONS √Ä V√âRIFIER:
1. Changement langue ‚Üí onglet qualit√© persiste
2. Protection image ‚Üí message d'erreur si pas d'image
3. Suppression bouton ‚Üí plus de bouton dans toolbar
"""

import os
from pathlib import Path

def test_source_code_corrections():
    """Test bas√© sur l'analyse du code source"""
    
    print("üîç ANALYSE CORRECTIONS DANS LE CODE SOURCE")
    print("=" * 50)
    
    # Paths
    src_dir = Path(__file__).parent / "src"
    main_file = src_dir / "main.py"
    quality_tab_file = src_dir / "quality_control_tab.py"
    
    print("1. TEST CORRECTION CHANGEMENT LANGUE")
    print("-" * 40)
    
    with open(main_file, 'r', encoding='utf-8') as f:
        main_content = f.read()
    
    # Check refresh_ui includes quality tab
    refresh_ui_section = False
    quality_tab_in_refresh = False
    
    if "def refresh_ui(self):" in main_content:
        refresh_ui_section = True
        print("   ‚úÖ M√©thode refresh_ui() trouv√©e")
        
        # Find the refresh_ui method
        lines = main_content.split('\n')
        in_refresh_ui = False
        for line in lines:
            if "def refresh_ui(self):" in line:
                in_refresh_ui = True
            elif in_refresh_ui and line.strip().startswith("def "):
                in_refresh_ui = False
            elif in_refresh_ui and "tab_quality" in line:
                quality_tab_in_refresh = True
                print("   ‚úÖ Onglet qualit√© dans refresh_ui()")
                break
    
    # Check QualityControlTab has refresh_ui method
    with open(quality_tab_file, 'r', encoding='utf-8') as f:
        quality_content = f.read()
    
    quality_has_refresh = "def refresh_ui(self):" in quality_content
    
    print(f"   refresh_ui() dans main.py: {'‚úÖ' if refresh_ui_section else '‚ùå'}")
    print(f"   tab_quality dans refresh: {'‚úÖ' if quality_tab_in_refresh else '‚ùå'}")  
    print(f"   refresh_ui() dans QualityControlTab: {'‚úÖ' if quality_has_refresh else '‚ùå'}")
    
    correction1 = refresh_ui_section and quality_tab_in_refresh and quality_has_refresh
    
    print("\n2. TEST PROTECTION AUCUNE IMAGE")
    print("-" * 32)
    
    # Check image validation in run_analysis
    image_check_present = False
    protection_message = False
    
    if "def run_analysis(self):" in quality_content:
        print("   ‚úÖ M√©thode run_analysis() trouv√©e")
        
        # Look for image validation
        if "self.app.current_image_path" in quality_content and "self.app.original_image" in quality_content:
            image_check_present = True
            print("   ‚úÖ V√©rification image path ET original_image")
        
        if "messagebox.showwarning" in quality_content:
            protection_message = True
            print("   ‚úÖ Message d'avertissement pr√©sent")
    
    correction2 = image_check_present and protection_message
    
    print("\n3. TEST SUPPRESSION ANCIEN BOUTON")
    print("-" * 33)
    
    # Check old button removed
    old_button_removed = "ttk.Button(toolbar, text=t('quality_check')" not in main_content
    old_method_removed = "def run_quality_check(self):" not in main_content
    new_method_present = "def show_quality_tab(self):" in main_content
    
    print(f"   Ancien bouton supprim√©: {'‚úÖ' if old_button_removed else '‚ùå'}")
    print(f"   Ancienne m√©thode supprim√©e: {'‚úÖ' if old_method_removed else '‚ùå'}")
    print(f"   Nouvelle m√©thode pr√©sente: {'‚úÖ' if new_method_present else '‚ùå'}")
    
    correction3 = old_button_removed and old_method_removed and new_method_present
    
    print("\nüìã R√âSUM√â DES CORRECTIONS")
    print("=" * 30)
    print(f"1. Changement langue:   {'‚úÖ CORRIG√â' if correction1 else '‚ùå √âCHEC'}")
    print(f"2. Protection image:    {'‚úÖ CORRIG√â' if correction2 else '‚ùå √âCHEC'}")
    print(f"3. Suppression bouton:  {'‚úÖ CORRIG√â' if correction3 else '‚ùå √âCHEC'}")
    
    all_corrections = correction1 and correction2 and correction3
    
    if all_corrections:
        print("\nüéâ TOUTES LES CORRECTIONS SONT EN PLACE!")
        print("   Les 3 probl√®mes identifi√©s ont √©t√© r√©solus:")
        print("   ‚Ä¢ Onglet qualit√© persiste lors changement langue")
        print("   ‚Ä¢ Analyse prot√©g√©e si aucune image charg√©e") 
        print("   ‚Ä¢ Ancien bouton supprim√©, interface nettoy√©e")
    else:
        print("\n‚ö†Ô∏è  CORRECTIONS PARTIELLES")
        if not correction1:
            print("   ‚ùå Probl√®me changement langue non r√©solu")
        if not correction2:
            print("   ‚ùå Probl√®me protection image non r√©solu")
        if not correction3:
            print("   ‚ùå Probl√®me suppression bouton non r√©solu")
    
    return all_corrections

if __name__ == "__main__":
    success = test_source_code_corrections()
    
    if success:
        print("\nüöÄ L'application est pr√™te avec toutes les corrections!")
        print("   Vous pouvez maintenant:")
        print("   ‚Ä¢ Changer de langue sans perdre l'onglet qualit√©")
        print("   ‚Ä¢ Cliquer 'Analyser' sans image ‚Üí message appropri√©")
        print("   ‚Ä¢ Interface propre sans doublons")
    else:
        print("\nüìù Des ajustements peuvent encore √™tre n√©cessaires.")
