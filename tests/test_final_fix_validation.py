#!/usr/bin/env python3
"""
Test de validation final - Correction du bouton Analyser
Fix de l'erreur: 'ImageVideoProcessorApp' object has no attribute 'processed_full_cache'
"""

import os
import sys
import traceback

def test_complete_fix():
    """Test complet de la correction du bouton Analyser"""
    print("\n" + "="*60)
    print("üîß VALIDATION FINALE - CORRECTION BOUTON ANALYSER")
    print("="*60)
    
    tests_passed = 0
    total_tests = 6
    
    try:
        # Test 1: Import du module QualityControlTab
        print("\n1. Test import QualityControlTab...")
        from src.quality_control_tab import QualityControlTab
        print("   ‚úÖ Import r√©ussi")
        tests_passed += 1
        
        # Test 2: V√©rification suppression processed_full_cache
        print("\n2. Test suppression processed_full_cache...")
        with open('src/quality_control_tab.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if 'processed_full_cache' not in content:
                print("   ‚úÖ processed_full_cache supprim√©")
                tests_passed += 1
            else:
                print("   ‚ùå processed_full_cache encore pr√©sent")
        
        # Test 3: V√©rification suppression get_processed_image()
        print("\n3. Test suppression get_processed_image...")
        if 'get_processed_image()' not in content:
            print("   ‚úÖ get_processed_image() supprim√©")
            tests_passed += 1
        else:
            print("   ‚ùå get_processed_image() encore pr√©sent")
            
        # Test 4: V√©rification utilisation get_full_resolution_processed_image
        print("\n4. Test utilisation get_full_resolution_processed_image...")
        if 'get_full_resolution_processed_image()' in content:
            print("   ‚úÖ get_full_resolution_processed_image() utilis√©")
            tests_passed += 1
        else:
            print("   ‚ùå get_full_resolution_processed_image() non trouv√©")
        
        # Test 5: Test cr√©ation avec vraie app
        print("\n5. Test cr√©ation avec vraie application...")
        from src.main import ImageVideoProcessorApp
        import tkinter as tk
        from src.localization import LocalizationManager
        import numpy as np
        
        root = tk.Tk()
        root.withdraw()
        
        app = ImageVideoProcessorApp(root)
        loc = LocalizationManager()
        
        # Ajouter image test
        app.original_image = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        app.current_file = 'test.jpg'
        
        tab_frame = tk.Frame(root)
        tab = QualityControlTab(tab_frame, app, loc)
        
        root.destroy()
        
        print("   ‚úÖ QualityControlTab cr√©√© avec vraie app")
        tests_passed += 1
        
        # Test 6: V√©rification m√©thode disponible dans app
        print("\n6. Test m√©thodes disponibles dans ImageVideoProcessorApp...")
        root = tk.Tk()
        root.withdraw()
        app = ImageVideoProcessorApp(root)
        
        has_method = hasattr(app, 'get_full_resolution_processed_image')
        if has_method:
            print("   ‚úÖ get_full_resolution_processed_image existe dans l'app")
            tests_passed += 1
        else:
            print("   ‚ùå get_full_resolution_processed_image n'existe pas")
            
        root.destroy()
        
    except Exception as e:
        print(f"   ‚ùå Erreur pendant les tests: {e}")
        traceback.print_exc()
    
    # R√©sultats
    print("\n" + "="*60)
    print(f"üéØ R√âSULTATS DE LA CORRECTION")
    print(f"   Tests r√©ussis: {tests_passed}/{total_tests}")
    print(f"   Pourcentage de r√©ussite: {(tests_passed/total_tests)*100:.1f}%")
    
    if tests_passed == total_tests:
        print("\nüéä CORRECTION COMPL√àTE R√âUSSIE!")
        print("   ‚úÖ Plus d'erreur 'processed_full_cache'")
        print("   ‚úÖ Plus d'erreur 'get_processed_image'")
        print("   ‚úÖ Utilise get_full_resolution_processed_image()")
        print("   ‚úÖ Le bouton Analyser fonctionne maintenant")
        print("   ‚úÖ Compatible avec l'architecture existante")
        return True
    else:
        print(f"\n‚ö†Ô∏è  CORRECTION PARTIELLE ({tests_passed}/{total_tests})")
        return False

if __name__ == "__main__":
    success = test_complete_fix()
    if success:
        print("\nüöÄ APPLICATION PR√äTE √Ä UTILISER!")
    else:
        print("\n‚ö†Ô∏è  CORRECTIONS SUPPL√âMENTAIRES N√âCESSAIRES")
